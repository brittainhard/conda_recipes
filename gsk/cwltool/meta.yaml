{% set name = "cwltool" %}
{% set version = "1.0.20170803160545" %}
{% set hash_type = "sha256" %}
{% set hash_value = "701c60fdff61824263ae4880d09db5e89c5cd6d4dc199cedcad2e1c32767661d" %}

package:
  version: '{{ version }}'
  name: '{{ name|lower }}'

source:
  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz
  '{{ hash_type }}': '{{ hash_value }}'
  fn: '{{ name }}-{{ version }}.tar.gz'

build:
  entry_points:
    - cwltool=cwltool.main:main
  number: 0
  script: python setup.py install  --single-version-externally-managed --record=record.txt

requirements:
  run:
    - python
    - setuptools
    - requests >=1.0
    - ruamel.yaml >=0.12.4,<0.15
    - rdflib >=4.2.2,<4.3.0
    - shellescape >=3.4.1,<3.5
    - schema-salad >=2.6,<3
    - typing >=3.5.3
    - six >=1.8.0
  build:
    - python
    - setuptools
    - requests >=1.0
    - ruamel.yaml >=0.12.4,<0.15
    - rdflib >=4.2.2,<4.3.0
    - shellescape >=3.4.1,<3.5
    - schema-salad >=2.6,<3
    - typing >=3.5.3
    - six >=1.8.0

test:
  imports:
    - cwltool
    - cwltool.tests
  commands:
    - cwltool --help
  requires:
    - mock >=2.0.0
    - pytest

about:
  dev_url: ''
  description: "==================================================================\nCommon workflow language tool description reference implementation\n==================================================================\n\
    \nCWL Conformance test: |Build Status|\n\nTravis: |Unix Build Status|\n\n.. |Unix Build Status| image:: https://img.shields.io/travis/common-workflow-language/cwltool/master.svg?label=unix%20build\n\
    \   :target: https://travis-ci.org/common-workflow-language/cwltool\n\nThis is the reference implementation of the Common Workflow Language.  It is\nintended to be feature complete and provide comprehensive\
    \ validation of CWL\nfiles as well as provide other tools related to working with CWL.\n\nThis is written and tested for Python 2.7.\n\nThe reference implementation consists of two packages.  The \"\
    cwltool\" package\nis the primary Python module containing the reference implementation in the\n\"cwltool\" module and console executable by the same name.\n\nThe \"cwlref-runner\" package is optional\
    \ and provides an additional entry point\nunder the alias \"cwl-runner\", which is the implementation-agnostic name for the\ndefault CWL interpreter installed on a host.\n\nInstall\n-------\n\nInstalling\
    \ the official package from PyPi (will install \"cwltool\" package as\nwell)::\n\n  pip install cwlref-runner\n\nIf installing alongside another CWL implementation then::\n\n  pip install cwltool\n\n\
    To install from source::\n\n  git clone https://github.com/common-workflow-language/cwltool.git\n  cd cwltool && python setup.py install\n  cd cwlref-runner && python setup.py install  # co-installing?\
    \ skip this\n\nRemember, if co-installing multiple CWL implementations then you need to\nmaintain which implementation ``cwl-runner`` points to via a symbolic file\nsystem link or `another facility\
    \ <https://wiki.debian.org/DebianAlternatives>`_.\n\nRunning tests locally\n---------------------\n\n-  Running basic tests ``(/tests)``:\n\n.. code:: bash\n\n    python setup.py test\n\n-  Running\
    \ the entire suite of CWL conformance tests:\n\nThe GitHub repository for the CWL specifications contains a script that tests a CWL\nimplementation against a wide array of valid CWL files using the\
    \ `cwltest <https://github.com/common-workflow-language/cwltest>`_\nprogram\n\nInstructions for running these tests can be found in the Common Workflow Language Specification repository at https://github.com/common-workflow-language/common-workflow-language/blob/master/CONFORMANCE_TESTS.md\n\
    \nRun on the command line\n-----------------------\n\nSimple command::\n\n  cwl-runner [tool-or-workflow-description] [input-job-settings]\n\nOr if you have multiple CWL implementations installed and\
    \ you want to override\nthe default cwl-runner use::\n\n  cwltool [tool-or-workflow-description] [input-job-settings]\n\nUse with boot2docker\n--------------------\nboot2docker is running docker inside\
    \ a virtual machine and it only mounts ``Users``\non it. The default behavior of CWL is to create temporary directories under e.g.\n``/Var`` which is not accessible to Docker containers.\n\nTo run CWL\
    \ successfully with boot2docker you need to set the ``--tmpdir-prefix``\nand ``--tmp-outdir-prefix`` to somewhere under ``/Users``::\n\n    $ cwl-runner --tmp-outdir-prefix=/Users/username/project --tmpdir-prefix=/Users/username/project\
    \ wc-tool.cwl wc-job.json\n\n.. |Build Status| image:: https://ci.commonwl.org/buildStatus/icon?job=cwltool-conformance\n   :target: https://ci.commonwl.org/job/cwltool-conformance/\n\nTool or workflow\
    \ loading from remote or local locations\n-------------------------------------------------------\n\n``cwltool`` can run tool and workflow descriptions on both local and remote\nsystems via its support\
    \ for HTTP[S] URLs.\n\nInput job files and Workflow steps (via the `run` directive) can reference CWL\ndocuments using absolute or relative local filesytem paths. If a relative path\nis referenced and\
    \ that document isn't found in the current directory then the\nfollowing locations will be searched:\nhttp://www.commonwl.org/v1.0/CommandLineTool.html#Discovering_CWL_documents_on_a_local_filesystem\n\
    \n\nUse with GA4GH Tool Registry API\n--------------------------------\n\nCwltool can launch tools directly from `GA4GH Tool Registry API`_ endpoints.\n\nBy default, cwltool searches https://dockstore.org/\
    \ .  Use --add-tool-registry to add other registries to the search path.\n\nFor example ::\n\n  cwltool --non-strict quay.io/collaboratory/dockstore-tool-bamstats:master test.json\n\nand (defaults to\
    \ latest when a version is not specified) ::\n\n  cwltool --non-strict quay.io/collaboratory/dockstore-tool-bamstats test.json\n\nFor this example, grab the test.json (and input file) from https://github.com/CancerCollaboratory/dockstore-tool-bamstats\n\
    \n.. _`GA4GH Tool Registry API`: https://github.com/ga4gh/tool-registry-schemas\n\nImport as a module\n------------------\n\nAdd::\n\n  import cwltool\n\nto your script.\n\nThe easiest way to use cwltool\
    \ to run a tool or workflow from Python is to use a Factory::\n\n  import cwltool.factory\n  fac = cwltool.factory.Factory()\n\n  echo = f.make(\"echo.cwl\")\n  result = echo(inp=\"foo\")\n\n  # result[\"\
    out\"] == \"foo\"\n\nLeveraging SoftwareRequirements (Beta)\n--------------------------------------\n\nCWL tools may be decoarated with ``SoftwareRequirement`` hints that cwltool\nmay in turn use to\
    \ resolve to packages in various package managers or\ndependency management systems such as `Environment Modules\n<http://modules.sourceforge.net/>`__.\n\nUtilizing ``SoftwareRequirement`` hints using\
    \ cwltool requires an optional\ndependency, for this reason be sure to use specify the ``deps`` modifier when\ninstalling cwltool. For instance::\n\n  $ pip install 'cwltool[deps]'\n\nInstalling cwltool\
    \ in this fashion enables several new command line options.\nThe most general of these options is ``--beta-dependency-resolvers-configuration``.\nThis option allows one to specify a dependency resolvers\
    \ configuration file.\nThis file may be specified as either XML or YAML and very simply describes various\nplugins to enable to \"resolve\" ``SoftwareRequirement`` dependencies.\n\nTo discuss some of\
    \ these plugins and how to configure them, first consider the\nfollowing ``hint`` definition for an example CWL tool.\n\n.. code:: yaml\n\n  SoftwareRequirement:\n    packages:\n    - package: seqtk\n\
    \      version:\n      - r93\n\nNow imagine deploying cwltool on a cluster with Software Modules installed\nand that a ``seqtk`` module is avaialble at version ``r93``. This means cluster\nusers likely\
    \ won't have the ``seqtk`` the binary on their ``PATH`` by default but after\nsourcing this module with the command ``modulecmd sh load seqtk/r93`` ``seqtk`` is\navailable on the ``PATH``. A simple\
    \ dependency resolvers configuration file, called\n``dependency-resolvers-conf.yml`` for instance, that would enable cwltool to source\nthe correct module environment before executing the above tool\
    \ would simply be:\n\n.. code:: yaml\n\n  - type: module\n\nThe outer list indicates that one plugin is being enabled, the plugin parameters are\ndefined as a dictionary for this one list item. There\
    \ is only one required parameter\nfor the plugin above, this is ``type`` and defines the plugin type. This parameter\nis required for all plugins. The available plugins and the parameters\navailable\
    \ for each are documented (incompletely) `here\n<https://docs.galaxyproject.org/en/latest/admin/dependency_resolvers.html>`__.\nUnfortunately, this documentation is in the context of Galaxy tool ``requirement``\
    \ s instead of CWL ``SoftwareRequirement`` s, but the concepts map fairly directly.\n\ncwltool is distributed with an example of such seqtk tool and sample corresponding\njob. It could executed from\
    \ the cwltool root using a dependency resolvers \nconfiguration file such as the above one using the command::\n\n  cwltool --beta-dependency-resolvers-configuration /path/to/dependency-resolvers-conf.yml\
    \ \\\n      tests/seqtk_seq.cwl \\\n      tests/seqtk_seq_job.json\n\nThis example demonstrates both that cwltool can leverage\nexisting software installations and also handle workflows with dependencies\n\
    on different versions of the same software and libraries. However the above\nexample does require an existing module setup so it is impossible to test this example\n\"out of the box\" with cwltool.\
    \ For a more isolated test that demonstrates all\nthe same concepts - the resolver plugin type ``galaxy_packages`` can be used.\n\n\"Galaxy packages\" are a lighter weight alternative to Environment\
    \ Modules that are\nreally just defined by a way to lay out directories into packages and versions\nto find little scripts that are sourced to modify the environment. They have\nbeen used for years\
    \ in Galaxy community to adapt Galaxy tools to cluster \nenvironments but require neither knowledge of Galaxy nor any special tools to \nsetup. These should work just fine for CWL tools.\n\nThe cwltool\
    \ source code repository's test directory is setup with a very simple\ndirectory that defines a set of \"Galaxy  packages\" (but really just defines one\npackage named ``random-lines``). The directory\
    \ layout is simply::\n\n  tests/test_deps_env/\n    random-lines/\n      1.0/\n        env.sh\n\nIf the ``galaxy_packages`` plugin is enabled and pointed at the\n``tests/test_deps_env`` directory in\
    \ cwltool's root and a ``SoftwareRequirement``\nsuch as the following is encountered.\n\n.. code:: yaml\n\n  hints:\n    SoftwareRequirement:\n      packages:\n      - package: 'random-lines'\n    \
    \    version:\n        - '1.0'\n\nThen cwltool will simply find that ``env.sh`` file and source it before executing\nthe corresponding tool. That ``env.sh`` script is only responsible for modifying\n\
    the job's ``PATH`` to add the required binaries.\n\nThis is a full example that works since resolving \"Galaxy packages\" has no \nexternal requirements. Try it out by executing the following command\
    \ from cwltool's\nroot directory::\n\n  cwltool --beta-dependency-resolvers-configuration tests/test_deps_env_resolvers_conf.yml \\\n      tests/random_lines.cwl \\\n      tests/random_lines_job.json\n\
    \nThe resolvers configuration file in the above example was simply:\n\n.. code:: yaml\n\n  - type: galaxy_packages\n    base_path: ./tests/test_deps_env\n\nIt is possible that the ``SoftwareRequirement``\
    \ s in a given CWL tool will not\nmatch the module names for a given cluster. Such requirements can be re-mapped\nto specific deployed packages and/or versions using another file specified using\nthe\
    \ resolver plugin parameter `mapping_files`. We will\ndemonstrate this using `galaxy_packages` but the concepts apply equally well\nto Environment Modules or Conda packages (described below) for instance.\n\
    \nSo consider the resolvers configuration file\n(`tests/test_deps_env_resolvers_conf_rewrite.yml`):\n\n.. code:: yaml\n\n  - type: galaxy_packages\n    base_path: ./tests/test_deps_env\n    mapping_files:\
    \ ./tests/test_deps_mapping.yml\n\nAnd the corresponding mapping configuraiton file (`tests/test_deps_mapping.yml`):\n\n.. code:: yaml\n\n  - from:\n      name: randomLines\n      version: 1.0.0-rc1\n\
    \    to:\n      name: random-lines\n      version: '1.0'\n\nThis is saying if cwltool encounters a requirement of ``randomLines`` at version\n``1.0.0-rc1`` in a tool, to rewrite to our specific plugin\
    \ as ``random-lines`` at\nversion ``1.0``. cwltool has such a test tool called ``random_lines_mapping.cwl``\nthat contains such a source ``SoftwareRequirement``. To try out this example with\nmapping,\
    \ execute the following command from the cwltool root directory::\n\n  cwltool --beta-dependency-resolvers-configuration tests/test_deps_env_resolvers_conf_rewrite.yml \\\n      tests/random_lines_mapping.cwl\
    \ \\\n      tests/random_lines_job.json\n\nThe previous examples demonstrated leveraging existing infrastructure to\nprovide requirements for CWL tools. If instead a real package manager is used\ncwltool\
    \ has the oppertunity to install requirements as needed. While initial\nsupport for Homebrew/Linuxbrew plugins is available, the most developed such\nplugin is for the `Conda <https://conda.io/docs/#>`__\
    \ package manager. Conda has the nice properties\nof allowing multiple versions of a package to be installed simultaneously,\nnot requiring evalated permissions to install Conda itself or packages using\n\
    Conda, and being cross platform. For these reasons, cwltool may run as a normal\nuser, install its own Conda environment and manage multiple versions of Conda packages\non both Linux and Mac OS X.\n\
    \nThe Conda plugin can be endlessly configured, but a sensible set of defaults\nthat has proven a powerful stack for dependency management within the Galaxy tool \ndevelopment ecosystem can be enabled\
    \ by simply passing cwltool the\n``--beta-conda-dependencies`` flag.\n\nWith this we can use the seqtk example above without Docker and without\nany externally managed services - cwltool should install\
    \ everything it needs\nand create an environment for the tool. Try it out with the follwing command::\n\n  cwltool --beta-conda-dependencies tests/seqtk_seq.cwl tests/seqtk_seq_job.json\n\nThe CWL specification\
    \ allows URIs to be attached to ``SoftwareRequirement`` s\nthat allow disambiguation of package names. If the mapping files described above\nallow deployers to adapt tools to their infrastructure, this\
    \ mechanism allows\ntools to adapt their requirements to multiple package managers. To demonstrate\nthis within the context of the seqtk, we can simply break the package name we\nuse and then specify\
    \ a specific Conda package as follows:\n\n.. code:: yaml\n\n  hints:\n    SoftwareRequirement:\n      packages:\n      - package: seqtk_seq\n        version:\n        - '1.2'\n        specs:\n     \
    \   - https://anaconda.org/bioconda/seqtk\n        - https://packages.debian.org/sid/seqtk\n\nThe example can be executed using the command::\n\n  cwltool --beta-conda-dependencies tests/seqtk_seq_wrong_name.cwl\
    \ tests/seqtk_seq_job.json\n\nThe plugin framework for managing resolution of these software requirements\nas maintained as part of `galaxy-lib <https://github.com/galaxyproject/galaxy-lib>`__ - a small,\
    \ portable subset of the Galaxy\nproject. More information on configuration and implementation can be found\nat the following links:\n\n- `Dependency Resolvers in Galaxy <https://docs.galaxyproject.org/en/latest/admin/dependency_resolvers.html>`__\n\
      - `Conda for [Galaxy] Tool Dependencies <https://docs.galaxyproject.org/en/latest/admin/conda_faq.html>`__\n- `Mapping Files - Implementation <https://github.com/galaxyproject/galaxy/commit/495802d229967771df5b64a2f79b88a0eaf00edb>`__\n\
      - `Specifications - Implementation <https://github.com/galaxyproject/galaxy/commit/81d71d2e740ee07754785306e4448f8425f890bc>`__\n- `Initial cwltool Integration Pull Request <https://github.com/common-workflow-language/cwltool/pull/214>`__\n\
    \nCwltool control flow\n--------------------\n\nTechnical outline of how cwltool works internally, for maintainers.\n\n#. Use CWL `load_tool()` to load document.\n\n   #. Fetches the document from file\
    \ or URL\n   #. Applies preprocessing (syntax/identifier expansion and normalization)\n   #. Validates the document based on cwlVersion\n   #. If necessary, updates the document to latest spec\n   #.\
    \ Constructs a Process object using `make_tool()` callback.  This yields a\n      CommandLineTool, Workflow, or ExpressionTool.  For workflows, this\n      recursively constructs each workflow step.\n\
    \   #. To construct custom types for CommandLineTool, Workflow, or\n      ExpressionTool, provide a custom `make_tool()`\n\n#. Iterate on the `job()` method of the Process object to get back runnable\
    \ jobs.\n\n   #. `job()` is a generator method (uses the Python iterator protocol)\n   #. Each time the `job()` method is invoked in an iteration, it returns one\n      of: a runnable item (an object\
    \ with a `run()` method), `None` (indicating\n      there is currently no work ready to run) or end of iteration (indicating\n      the process is complete.)\n   #. Invoke the runnable item by calling\
    \ `run()`.  This runs the tool and gets output.\n   #. Output of a process is reported by an output callback.\n   #. `job()` may be iterated over multiple times.  It will yield all the work\n      that\
    \ is currently ready to run and then yield None.\n\n#. \"Workflow\" objects create a corresponding \"WorkflowJob\" and \"WorkflowJobStep\" objects to hold the workflow state for the duration of the\
    \ job invocation.\n\n   #. The WorkflowJob iterates over each WorkflowJobStep and determines if the\n      inputs the step are ready.\n   #. When a step is ready, it constructs an input object for that\
    \ step and\n      iterates on the `job()` method of the workflow job step.\n   #. Each runnable item is yielded back up to top level run loop\n   #. When a step job completes and receives an output\
    \ callback, the\n      job outputs are assigned to the output of the workflow step.\n   #. When all steps are complete, the intermediate files are moved to a final\n      workflow output, intermediate\
    \ directories are deleted, and the output\n      callback for the workflow is called.\n\n#. \"CommandLineTool\" job() objects yield a single runnable object.\n\n   #. The CommandLineTool `job()` method\
    \ calls `makeJobRunner()` to create a\n      `CommandLineJob` object\n   #. The job method configures the CommandLineJob object by setting public\n      attributes\n   #. The job method iterates over\
    \ file and directories inputs to the\n      CommandLineTool and creates a \"path map\".\n   #. Files are mapped from their \"resolved\" location to a \"target\" path where\n      they will appear at\
    \ tool invocation (for example, a location inside a\n      Docker container.)  The target paths are used on the command line.\n   #. Files are staged to targets paths using either Docker volume binds\
    \ (when\n      using containers) or symlinks (if not).  This staging step enables files\n      to be logically rearranged or renamed independent of their source layout.\n   #. The run() method of CommandLineJob\
    \ executes the command line tool or\n      Docker container, waits for it to complete, collects output, and makes\n      the output callback.\n\n\nExtension points\n----------------\n\nThe following\
    \ functions can be provided to main(), to load_tool(), or to the\nexecutor to override or augment the listed behaviors.\n\nexecutor\n  ::\n\n    executor(tool, job_order_object, **kwargs)\n      (Process,\
    \ Dict[Text, Any], **Any) -> Tuple[Dict[Text, Any], Text]\n\n  A toplevel workflow execution loop, should synchronously execute a process\n  object and return an output object.\n\nmakeTool\n  ::\n\n\
    \    makeTool(toolpath_object, **kwargs)\n      (Dict[Text, Any], **Any) -> Process\n\n  Construct a Process object from a document.\n\nselectResources\n  ::\n\n    selectResources(request)\n      (Dict[Text,\
    \ int]) -> Dict[Text, int]\n\n  Take a resource request and turn it into a concrete resource assignment.\n\nversionfunc\n  ::\n\n    ()\n      () -> Text\n\n  Return version string.\n\nmake_fs_access\n\
    \  ::\n\n    make_fs_access(basedir)\n      (Text) -> StdFsAccess\n\n  Return a file system access object.\n\nfetcher_constructor\n  ::\n\n    fetcher_constructor(cache, session)\n      (Dict[unicode,\
    \ unicode], requests.sessions.Session) -> Fetcher\n\n  Construct a Fetcher object with the supplied cache and HTTP session.\n\nresolver\n  ::\n\n    resolver(document_loader, document)\n      (Loader,\
    \ Union[Text, dict[Text, Any]]) -> Text\n\n  Resolve a relative document identifier to an absolute one which can be fetched.\n\nlogger_handler\n  ::\n\n    logger_handler\n      logging.Handler\n\n\
    \  Handler object for logging.\n\n\n"
  license: Apache Software License
  license_family: APACHE
  summary: Common workflow language reference implementation
  home: https://github.com/common-workflow-language/cwltool
  license_file: ''
  doc_url: ''

extra:
  recipe-maintainers:
    - brittainhard
