{% set name = "PyVCF" %}
{% set version = "0.6.8" %}
{% set hash_type = "sha256" %}
{% set hash_value = "e9d872513d179d229ab61da47a33f42726e9613784d1cb2bac3f8e2642f6f9d9" %}

package:
  name: '{{ name|lower }}'
  version: '{{ version }}'

source:
  fn: '{{ name }}-{{ version }}.tar.gz'
  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz
  '{{ hash_type }}': '{{ hash_value }}'

build:
  number: 0
  script: python setup.py install  --single-version-externally-managed --record=record.txt

requirements:
  build:
    - python
    - setuptools
  run:
    - python
    - setuptools

test:
  imports:
    - vcf
    - vcf.test

about:
  home: https://github.com/jamescasbon/PyVCF
  license: BSD License or MIT License
  license_family: BSD
  license_file: ''
  summary: Variant Call Format (VCF) parser for Python
  description: "A VCFv4.0 and 4.1 parser for Python.\n\nOnline version of PyVCF documentation is available at http://pyvcf.rtfd.org/\n\nThe intent of this module is to mimic the ``csv`` module in the Python\
    \ stdlib,\nas opposed to more flexible serialization formats like JSON or YAML.  ``vcf``\nwill attempt to parse the content of each record based on the data types\nspecified in the meta-information\
    \ lines --  specifically the ##INFO and\n##FORMAT lines.  If these lines are missing or incomplete, it will check\nagainst the reserved types mentioned in the spec.  Failing that, it will just\nreturn\
    \ strings.\n\nThere main interface is the class: ``Reader``.  It takes a file-like\nobject and acts as a reader::\n\n    >>> import vcf\n    >>> vcf_reader = vcf.Reader(open('vcf/test/example-4.0.vcf',\
    \ 'r'))\n    >>> for record in vcf_reader:\n    ...     print record\n    Record(CHROM=20, POS=14370, REF=G, ALT=[A])\n    Record(CHROM=20, POS=17330, REF=T, ALT=[A])\n    Record(CHROM=20, POS=1110696,\
    \ REF=A, ALT=[G, T])\n    Record(CHROM=20, POS=1230237, REF=T, ALT=[None])\n    Record(CHROM=20, POS=1234567, REF=GTCT, ALT=[G, GTACT])\n\n\nThis produces a great deal of information, but it is conveniently\
    \ accessed.\nThe attributes of a Record are the 8 fixed fields from the VCF spec::\n\n    * ``Record.CHROM``\n    * ``Record.POS``\n    * ``Record.ID``\n    * ``Record.REF``\n    * ``Record.ALT``\n\
    \    * ``Record.QUAL``\n    * ``Record.FILTER``\n    * ``Record.INFO``\n\nplus attributes to handle genotype information:\n\n    * ``Record.FORMAT``\n    * ``Record.samples``\n    * ``Record.genotype``\n\
    \n``samples`` and ``genotype``, not being the title of any column, are left lowercase.  The format\nof the fixed fields is from the spec.  Comma-separated lists in the VCF are\nconverted to lists. \
    \ In particular, one-entry VCF lists are converted to\none-entry Python lists (see, e.g., ``Record.ALT``).  Semicolon-delimited lists\nof key=value pairs are converted to Python dictionaries, with flags\
    \ being given\na ``True`` value. Integers and floats are handled exactly as you'd expect::\n\n    >>> vcf_reader = vcf.Reader(open('vcf/test/example-4.0.vcf', 'r'))\n    >>> record = next(vcf_reader)\n\
    \    >>> print record.POS\n    14370\n    >>> print record.ALT\n    [A]\n    >>> print record.INFO['AF']\n    [0.5]\n\nThere are a number of convenience methods and properties for each ``Record`` allowing\
    \ you to\nexamine properties of interest::\n\n    >>> print record.num_called, record.call_rate, record.num_unknown\n    3 1.0 0\n    >>> print record.num_hom_ref, record.num_het, record.num_hom_alt\n\
    \    1 1 1\n    >>> print record.nucl_diversity, record.aaf, record.heterozygosity\n    0.6 [0.5] 0.5\n    >>> print record.get_hets()\n    [Call(sample=NA00002, CallData(GT=1|0, GQ=48, DP=8, HQ=[51,\
    \ 51]))]\n    >>> print record.is_snp, record.is_indel, record.is_transition, record.is_deletion\n    True False True False\n    >>> print record.var_type, record.var_subtype\n    snp ts\n    >>> print\
    \ record.is_monomorphic\n    False\n\n``record.FORMAT`` will be a string specifying the format of the genotype\nfields.  In case the FORMAT column does not exist, ``record.FORMAT`` is\n``None``.  Finally,\
    \ ``record.samples`` is a list of dictionaries containing the\nparsed sample column and ``record.genotype`` is a way of looking up genotypes\nby sample name::\n\n    >>> record = next(vcf_reader)\n\
    \    >>> for sample in record.samples:\n    ...     print sample['GT']\n    0|0\n    0|1\n    0/0\n    >>> print record.genotype('NA00001')['GT']\n    0|0\n\nThe genotypes are represented by ``Call``\
    \ objects, which have three attributes: the\ncorresponding Record ``site``, the sample name in ``sample`` and a dictionary of\ncall data in ``data``::\n\n     >>> call = record.genotype('NA00001')\n\
    \     >>> print call.site\n     Record(CHROM=20, POS=17330, REF=T, ALT=[A])\n     >>> print call.sample\n     NA00001\n     >>> print call.data\n     CallData(GT=0|0, GQ=49, DP=3, HQ=[58, 50])\n\nPlease\
    \ note that as of release 0.4.0, attributes known to have single values (such as\n``DP`` and ``GQ`` above) are returned as values.  Other attributes are returned\nas lists (such as ``HQ`` above).\n\n\
    There are also a number of methods::\n\n    >>> print call.called, call.gt_type, call.gt_bases, call.phased\n    True 0 T|T True\n\nMetadata regarding the VCF file itself can be investigated through\
    \ the\nfollowing attributes:\n\n    * ``Reader.metadata``\n    * ``Reader.infos``\n    * ``Reader.filters``\n    * ``Reader.formats``\n    * ``Reader.samples``\n\nFor example::\n\n    >>> vcf_reader.metadata['fileDate']\n\
    \    '20090805'\n    >>> vcf_reader.samples\n    ['NA00001', 'NA00002', 'NA00003']\n    >>> vcf_reader.filters\n    OrderedDict([('q10', Filter(id='q10', desc='Quality below 10')), ('s50', Filter(id='s50',\
    \ desc='Less than 50% of samples have data'))])\n    >>> vcf_reader.infos['AA'].desc\n    'Ancestral Allele'\n\nALT records are actually classes, so that you can interrogate them::\n\n    >>> reader\
    \ = vcf.Reader(open('vcf/test/example-4.1-bnd.vcf'))\n    >>> _ = next(reader); row = next(reader)\n    >>> print row\n    Record(CHROM=1, POS=2, REF=T, ALT=[T[2:3[])\n    >>> bnd = row.ALT[0]\n   \
    \ >>> print bnd.withinMainAssembly, bnd.orientation, bnd.remoteOrientation, bnd.connectingSequence\n    True False True T\n\nThe Reader supports retrieval of records within designated regions for files\n\
    with tabix indexes via the fetch method. This requires the pysam module as a\ndependency. Pass in a chromosome, and, optionally, start and end coordinates,\nfor the regions of interest::\n\n    >>>\
    \ vcf_reader = vcf.Reader(filename='vcf/test/tb.vcf.gz')\n    >>> # fetch all records on chromosome 20 from base 1110696 through 1230237\n    >>> for record in vcf_reader.fetch('20', 1110695, 1230237):\
    \  # doctest: +SKIP\n    ...     print record\n    Record(CHROM=20, POS=1110696, REF=A, ALT=[G, T])\n    Record(CHROM=20, POS=1230237, REF=T, ALT=[None])\n\nNote that the start and end coordinates are\
    \ in the zero-based, half-open\ncoordinate system, similar to ``_Record.start`` and ``_Record.end``. The very\nfirst base of a chromosome is index 0, and the the region includes bases up\nto, but not\
    \ including the base at the end coordinate. For example::\n\n    >>> # fetch all records on chromosome 4 from base 11 through 20\n    >>> vcf_reader.fetch('4', 10, 20)   # doctest: +SKIP\n\nwould include\
    \ all records overlapping a 10 base pair region from the 11th base\nof through the 20th base (which is at index 19) of chromosome 4. It would not\ninclude the 21st base (at index 20). (See\nhttp://genomewiki.ucsc.edu/index.php/Coordinate_Transforms\
    \ for more\ninformation on the zero-based, half-open coordinate system.)\n\nThe ``Writer`` class provides a way of writing a VCF file.  Currently, you must specify a\ntemplate ``Reader`` which provides\
    \ the metadata::\n\n    >>> vcf_reader = vcf.Reader(filename='vcf/test/tb.vcf.gz')\n    >>> vcf_writer = vcf.Writer(open('/dev/null', 'w'), vcf_reader)\n    >>> for record in vcf_reader:\n    ...  \
    \   vcf_writer.write_record(record)\n\nAn extensible script is available to filter vcf files in vcf_filter.py.  VCF filters\ndeclared by other packages will be available for use in this script.  Please\n\
    see :doc:`FILTERS` for full description.\n"
  doc_url: ''
  dev_url: ''

extra:
  recipe-maintainers: ''
